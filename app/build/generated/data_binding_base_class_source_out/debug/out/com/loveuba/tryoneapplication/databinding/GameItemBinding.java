// Generated by view binder compiler. Do not edit!
package com.loveuba.tryoneapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.loveuba.tryoneapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class GameItemBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final ImageView awayImg;

  @NonNull
  public final TextView awayName;

  @NonNull
  public final ImageView homeImg;

  @NonNull
  public final TextView homeName;

  @NonNull
  public final TextView matchDate;

  @NonNull
  public final Guideline matchGuidelineOne;

  @NonNull
  public final Guideline matchGuidelineTwo;

  @NonNull
  public final TextView matchPlaytime;

  @NonNull
  public final TextView matchScore;

  @NonNull
  public final TextView matchTime;

  @NonNull
  public final LinearLayout playedScores;

  @NonNull
  public final LinearLayout unplayedDate;

  private GameItemBinding(@NonNull CardView rootView, @NonNull ImageView awayImg,
      @NonNull TextView awayName, @NonNull ImageView homeImg, @NonNull TextView homeName,
      @NonNull TextView matchDate, @NonNull Guideline matchGuidelineOne,
      @NonNull Guideline matchGuidelineTwo, @NonNull TextView matchPlaytime,
      @NonNull TextView matchScore, @NonNull TextView matchTime, @NonNull LinearLayout playedScores,
      @NonNull LinearLayout unplayedDate) {
    this.rootView = rootView;
    this.awayImg = awayImg;
    this.awayName = awayName;
    this.homeImg = homeImg;
    this.homeName = homeName;
    this.matchDate = matchDate;
    this.matchGuidelineOne = matchGuidelineOne;
    this.matchGuidelineTwo = matchGuidelineTwo;
    this.matchPlaytime = matchPlaytime;
    this.matchScore = matchScore;
    this.matchTime = matchTime;
    this.playedScores = playedScores;
    this.unplayedDate = unplayedDate;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static GameItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static GameItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.game_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static GameItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.away_img;
      ImageView awayImg = ViewBindings.findChildViewById(rootView, id);
      if (awayImg == null) {
        break missingId;
      }

      id = R.id.away_name;
      TextView awayName = ViewBindings.findChildViewById(rootView, id);
      if (awayName == null) {
        break missingId;
      }

      id = R.id.home_img;
      ImageView homeImg = ViewBindings.findChildViewById(rootView, id);
      if (homeImg == null) {
        break missingId;
      }

      id = R.id.home_name;
      TextView homeName = ViewBindings.findChildViewById(rootView, id);
      if (homeName == null) {
        break missingId;
      }

      id = R.id.match_date;
      TextView matchDate = ViewBindings.findChildViewById(rootView, id);
      if (matchDate == null) {
        break missingId;
      }

      id = R.id.match_guideline_one;
      Guideline matchGuidelineOne = ViewBindings.findChildViewById(rootView, id);
      if (matchGuidelineOne == null) {
        break missingId;
      }

      id = R.id.match_guideline_two;
      Guideline matchGuidelineTwo = ViewBindings.findChildViewById(rootView, id);
      if (matchGuidelineTwo == null) {
        break missingId;
      }

      id = R.id.match_playtime;
      TextView matchPlaytime = ViewBindings.findChildViewById(rootView, id);
      if (matchPlaytime == null) {
        break missingId;
      }

      id = R.id.match_score;
      TextView matchScore = ViewBindings.findChildViewById(rootView, id);
      if (matchScore == null) {
        break missingId;
      }

      id = R.id.match_time;
      TextView matchTime = ViewBindings.findChildViewById(rootView, id);
      if (matchTime == null) {
        break missingId;
      }

      id = R.id.played_scores;
      LinearLayout playedScores = ViewBindings.findChildViewById(rootView, id);
      if (playedScores == null) {
        break missingId;
      }

      id = R.id.unplayed_date;
      LinearLayout unplayedDate = ViewBindings.findChildViewById(rootView, id);
      if (unplayedDate == null) {
        break missingId;
      }

      return new GameItemBinding((CardView) rootView, awayImg, awayName, homeImg, homeName,
          matchDate, matchGuidelineOne, matchGuidelineTwo, matchPlaytime, matchScore, matchTime,
          playedScores, unplayedDate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
